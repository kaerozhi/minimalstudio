---
import { getCollection } from 'astro:content';
import { config } from '@/site.config';
import { getCategories } from '@/utils/getCategories';
import { slugify } from '@/utils/slugify';

// 加载 UI 组件
import BaseLayout from '@/layouts/BaseLayout.astro';
import BlogPost from '@/components/entries/BlogPost.astro';
import Pagination from '@/components/global/Pagination.astro';
import Categories from '@/components/entries/Categories.astro';

// 从 /src/content/config.ts 读取各版面设置
import { collections } from '@/content/config';

export const prerender = true;

// Astro 需要在函数内部重新定义
export async function getStaticPaths() {
  const collectionNames = Object.keys(collections);

  return collectionNames.map((collection) => ({
    params: { collection },
  }));
}

const collection = Astro.url.pathname.split('/')[1];

// 再定义一次（页面运行时才需要）
const collectionNames = Object.keys(collections);

if (!collectionNames.includes(collection)) {
  throw new Error(`Collection "${collection}" 不存在于 content/config.ts`);
}

// 所有文章
const allEntries = await getCollection(collection);
const visibleEntries = allEntries
  .filter((entry) => entry.data.draft !== true)
  .sort((a, b) => Date.parse(b.data.date) - Date.parse(a.data.date));

// 文章总数
const page = 1;
const perPage = config.content.postsPerPage || 10;
const totalPages = Math.ceil(visibleEntries.length / perPage);
const posts = visibleEntries.slice(0, perPage);

// 筛选置顶文章
const featuredEntry = posts.find(entry => entry.data.featured === true);
const regularEntries = posts.filter(entry => entry.data.featured !== true);

if (featuredEntry) {
  regularEntries.unshift(featuredEntry);
}

// 获取分类
const currentCategories = await getCategories(collection);
---

<BaseLayout title={collection}>
  <main class="container-wide">
    <div class="mt-32"></div>
    <div>
      <h1 class="text-4xl md:text-8xl/24 uppercase font-bold mb-8 tracking-tighter">
        {collection} 
        <span class="text-base align-top tracking-normal">{visibleEntries.length}</span>
      </h1>
    </div>
    <div>
      <Categories collection={collection}></Categories>
    </div>
    
    <div class="mt-8">
      {posts.map(post => (
        <BlogPost
          title={post.data.title}
          href={`/${collection}/${post.slug}`}
          date={post.data.date}
          description={post.data.description}
        />
      ))}
      <Pagination collection={collection} page={page} totalPages={totalPages} />
    </div>
  </main>
</BaseLayout>